[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "yalht"
version = "0.1.0"
description = "Deep Learning training pipeline template based on pytorch_lightning and hydra"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
dependencies = [
    # --------- pytorch ---------
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "pytorch-lightning>=2.0.0",
    # --------- hydra ---------
    "hydra-core>=1.3.0",
    "hydra-colorlog>=1.2.0",
    "hydra-optuna-sweeper>=1.2.0",
    # --------- utilities ---------
    "pyrootutils",
    "rich",
    "omegaconf",
    "pynvml",  # For GPU metadata logging
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest",
    "ruff",
    "mypy",
    "types-PyYAML",
]
# Optional logging backends
loggers = [
    "wandb",
    "neptune-client",
    "mlflow",
    "comet-ml",
]
# Optional: Advanced data processing
data = [
    "opencv-python-headless",
    "albumentations",
    "Pillow",
    "h5py",
]
# Optional: Analysis and visualization
viz = [
    "matplotlib",
    "seaborn",
    "scikit-learn",
    "ipython",
    "tensorboard",
]

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and others
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "S",      # flake8-bandit (security)
    "D",      # pydocstyle (docstring conventions)
]

# Ignore specific rules that were ignored in the old flake8 config
ignore = [
    "E402",   # module level import not at top of file
    "F401",   # imported but unused
    "F841",   # local variable is assigned but never used
    "S101",   # use of assert (common in tests and ML code)
    "D100",   # missing docstring in public module
    "D101",   # missing docstring in public class
    "D102",   # missing docstring in public method
    "D103",   # missing docstring in public function
    "D104",   # missing docstring in public package
    "D107",   # missing docstring in __init__
]

# Exclude directories
exclude = [
    "logs",
    "data",
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # Allow unused imports and missing docstrings
"tests/*" = ["T20", "S101", "D"]  # Allow print, assert, and missing docstrings in tests
"scripts/*" = ["T20", "D"]        # Allow print and missing docstrings in scripts

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
# Use single quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.mypy]
# Basic options
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Import discovery
ignore_missing_imports = true
follow_imports = "normal"
namespace_packages = true

# Exclude patterns
exclude = [
    "^logs/",
    "^data/",
    "^notebooks/",
]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
